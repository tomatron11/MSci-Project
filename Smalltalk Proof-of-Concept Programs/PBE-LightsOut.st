SimpleSwitchMorph subclass: #LOCell	instanceVariableNames: 'mouseAction'	classVariableNames: ''	package: 'PBE-LightsOut'!!LOCell commentStamp: 'ThomasWilkinson 10/10/2022 20:44' prior: 0!Class: Cell object for Lights Out gameResponsibilities: When cell clicked, turns all 4 cells around it blue. Waits for mouse click and passes message to LOGame when it is clicked.     Instance Variables	mouseAction:		<Object>!!LOCell methodsFor: 'intialization' stamp: 'ThomasWilkinson 10/10/2022 19:12'!initialize	super initialize.	self label: ''.	self borderWidth: 2.	bounds := 0 @ 0 corner: 16 @ 16.	offColor := Color paleYellow.	onColor := Color paleBlue darker.	self useSquareCorners.	self turnOff	! !!LOCell methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/10/2022 20:33'!mouseAction: aBlock	mouseAction := aBlock! !!LOCell methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/10/2022 20:33'!mouseUp: anEvent	mouseAction value! !!LOCell methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/10/2022 20:33'!mouseMove: anEvent! !BorderedMorph subclass: #LOGame	instanceVariableNames: 'cells mouseAction'	classVariableNames: ''	package: 'PBE-LightsOut'!!LOGame commentStamp: 'ThomasWilkinson 10/10/2022 20:43' prior: 0!Class: Creates the board which the Lights Out game is played.Responsibilities: Specifies how large the window is, which cells to turn blue and how many cells are on the board.     Instance Variables	cells:		<Object>	mouseAction:		<Object>!!LOGame methodsFor: 'game logic' stamp: 'ThomasWilkinson 10/10/2022 20:01'!toggleNeighboursOfCellAt: i at: j	i > 1	ifTrue: [ (cells at: i - 1 at: j) toggleState ].	i < self cellsPerSide	ifTrue: [ (cells at: i + 1 at: j) toggleState ].	j > 1	ifTrue: [ (cells at: i at: j - 1) toggleState ].	j < self cellsPerSide	ifTrue: [ (cells at: i at: j + 1) toggleState ]! !!LOGame methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/10/2022 20:36'!cellsPerSide	"The number of cells along each side of the game".	^ 10! !!LOGame methodsFor: 'initialization' stamp: 'ThomasWilkinson 10/10/2022 19:50'!initialize 	| sampleCell width height n |	super initialize.	n := self cellsPerSide.	sampleCell := LOCell new.	width := sampleCell width.	height := sampleCell height.	self bounds: (5 @ 5 extent: (width * n) @ (height * n) + (2 * self borderWidth)).	cells := Array2D new: n tabulate: [ :i :j | self newCellAt: i at: j ]! !!LOGame methodsFor: 'initialization' stamp: 'ThomasWilkinson 10/10/2022 20:19'!newCellAt: i at: j	"Create a cell for position (i,j) and add it to my on-screen	representation at the appropriate screen position. Answer the	new cell"	| c origin |	c := LOCell new.	origin := self innerBounds origin.	self addMorph: c.	c position: ((i - 1) * c width) @ ((j - 1) * c height) + origin.	c mouseAction: [ self toggleNeighboursOfCellAt: i at: j ].	^ c! !