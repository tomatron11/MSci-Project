PackageManifest subclass: #ManifestCustomerOrderingSystem	instanceVariableNames: ''	classVariableNames: ''	package: 'CustomerOrderingSystem-Manifest'!!ManifestCustomerOrderingSystem commentStamp: '<historical>' prior: 0!Please describe the package using the class comment of the included manifest class. The manifest class also includes other additional metadata for the package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ManifestCustomerOrderingSystem class	instanceVariableNames: ''!!ManifestCustomerOrderingSystem class methodsFor: 'code-critics' stamp: 'ThomasWilkinson 10/30/2022 18:37'!ruleUncommonMessageSendRuleV1FalsePositive	^ #(#(#(#RGPackageDefinition #(#CustomerOrderingSystem)) #'2022-10-30T18:37:22.618+00:00') )! !TestCase subclass: #CustomerTest	instanceVariableNames: 'orders'	classVariableNames: ''	package: 'CustomerOrderingSystem'!!CustomerTest commentStamp: 'ThomasWilkinson 10/13/2022 16:39' prior: 0!Tests for the Customer class!!CustomerTest methodsFor: 'tests' stamp: 'ThomasWilkinson 10/25/2022 16:15'!testCust_id	| customer |	customer := Customer new.	customer Cust_id: '1'.	self assert: (customer Cust_id) equals: '1'.! !!CustomerTest methodsFor: 'tests' stamp: 'ThomasWilkinson 10/25/2022 16:22'!testtoString	| customer |	customer := Customer new Name: #(Bob).	customer Address: #(123 Av).	customer Email: #(bob@gmail.com).	customer Phone_num: #(345).	customer Cust_id: #(0).	self assert: (customer toString) equals: #(Bob 123 Av 345 bob@gmail.com 0).! !!CustomerTest methodsFor: 'tests' stamp: 'ThomasWilkinson 12/8/2022 16:59'!testaddOrder	| customer |	customer := Customer new addOrder: 1.	self assert: (customer Orders size) equals: 1.! !!CustomerTest methodsFor: 'tests' stamp: 'ThomasWilkinson 12/8/2022 16:59'!testremoveOrder	| customer |	customer := Customer new addOrder: 1.	customer removeOrder: 1.	self assert: (customer Orders size) equals: 0.! !!CustomerTest methodsFor: 'tests' stamp: 'ThomasWilkinson 10/13/2022 19:46'!testOrders	| customer |	orders := Array new: 3.	orders at: 1 put: 1.	orders at: 2 put: 2.	orders at: 3 put: 3.	customer := Customer new Orders: orders.	self assert: (customer Orders) equals: orders.! !Object subclass: #Entity	instanceVariableNames: 'phone_num name address email'	classVariableNames: ''	package: 'CustomerOrderingSystem'!!Entity commentStamp: 'ThomasWilkinson 10/22/2022 19:46' prior: 0!Class: Generic Entity class that is the parent class to Customer and RetailerResponbility: Contains fields for Name, Address, Phone Number and EmailCollaborators: Customer, Retailer - Passes contained methods to these classesPublic API and Key MessagesAddress, Email, Name, Phone_num getters and setters!!Entity methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:44'!Address: address_value	address := address_value.! !!Entity methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:44'!Name	^ name.! !!Entity methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:43'!Phone_num: pn	phone_num := pn.! !!Entity methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:43'!Phone_num	^ phone_num.! !!Entity methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:44'!Address	^ address.! !!Entity methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:44'!Email	^ email.! !!Entity methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:44'!Email: email_value	email := email_value.! !!Entity methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:44'!Name: name_value	name := name_value.! !Entity subclass: #Customer	instanceVariableNames: 'cust_id orders'	classVariableNames: ''	package: 'CustomerOrderingSystem'!!Customer commentStamp: 'ThomasWilkinson 10/22/2022 19:53' prior: 0!Class: The customer class which is a subclass of EntityResponsibility: Contains Cust_id and Orders fields, which contain a unique customer id and a list of previous ordersCollaborators: Subclass of Entity, inherits Name, Address, Phone_num and Email fieldsPublic API and Key MessagesCust_id and Orders getters and settersAdds order to order OrderedSelection objectRemove order from OrderedSelectiontoString method Internal Representation and Key Implementation Points.Initilises the OrderedSelection object Orders at creation of instance which contains the customer's orders!!Customer methodsFor: 'initialization' stamp: 'ThomasWilkinson 10/21/2022 19:44'!initialize 	orders := OrderedCollection new.! !!Customer methodsFor: 'adding' stamp: 'ThomasWilkinson 10/21/2022 19:44'!removeOrder: id	orders remove: id.! !!Customer methodsFor: 'adding' stamp: 'ThomasWilkinson 10/21/2022 19:44'!addOrder: id	orders add: id.! !!Customer methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/25/2022 17:29'!toString 	| string |	string := #('Customer Name:'), name, #('Address:'), address, #('Phone Num:'), phone_num, #('Email:'), email, #('Customer ID:'), cust_id.	^ string.! !!Customer methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:44'!Cust_id: id	cust_id := id.! !!Customer methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:44'!Cust_id	^ cust_id.! !!Customer methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:44'!Orders: order_list	orders := order_list.! !!Customer methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:44'!Orders	^ orders.! !TestCase subclass: #EntityTest	instanceVariableNames: ''	classVariableNames: ''	package: 'CustomerOrderingSystem'!!EntityTest commentStamp: 'ThomasWilkinson 10/13/2022 16:39' prior: 0!Tests for the Entity class!!EntityTest methodsFor: 'tests' stamp: 'ThomasWilkinson 10/13/2022 19:48'!testPhone_num	| entity |	entity := Entity new Phone_num: #(123).	self assert: (entity Phone_num) equals: #(123).! !!EntityTest methodsFor: 'tests' stamp: 'ThomasWilkinson 10/13/2022 19:47'!testAddress	| entity |	entity := Entity new Address: #(123 Street Name).	self assert: (entity Address) equals: #(123 Street Name).! !!EntityTest methodsFor: 'tests' stamp: 'ThomasWilkinson 10/13/2022 19:47'!testEmail	| entity |	entity := Entity new Email: #(123@gmail.com).	self assert: (entity Email) equals: #(123@gmail.com).! !!EntityTest methodsFor: 'tests' stamp: 'ThomasWilkinson 10/13/2022 19:47'!testName 	| entity |	entity := Entity new Name: #(Bob Dylan).	self assert: (entity Name) equals: #(Bob Dylan).! !Object subclass: #Order	instanceVariableNames: 'order_id address retailer_id product_id dateTime cust_id'	classVariableNames: ''	package: 'CustomerOrderingSystem'!!Order commentStamp: 'ThomasWilkinson 10/22/2022 19:59' prior: 0!Class: Order class which represents an order of a product from a customer.Responsibility: Contains the Order_id, Address, Product_id, Retailer_id, Customer_id and DateTime. Allows for the getting and setting of these values.   Collaborators: Gets Product_id, Retailer_id and Customer_id from the corresponding objects.Public API and Key MessagesSetters and getters for Order_id, Address, Product_id, Retailer_id, Customer_idReturn DateTimetoString method Internal Representation and Key Implementation Points.Gets current DateTime from instance creation!!Order methodsFor: 'initialization' stamp: 'ThomasWilkinson 10/22/2022 20:12'!initialize 	dateTime := DateAndTime now asOrderedCollection. "Gets local DateTime when order is created"	! !!Order methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:46'!Retailer_id	^ retailer_id.! !!Order methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/22/2022 16:03'!Cust_id: id	cust_id := id.! !!Order methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:45'!Order_id	^ order_id.! !!Order methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:46'!Retailer_id: id	retailer_id := id.! !!Order methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:46'!Address 	^ address.! !!Order methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/22/2022 16:33'!Address: address_val	address := address_val.! !!Order methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:46'!Product_id: id	product_id := id.! !!Order methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/22/2022 16:44'!DateTime	^ dateTime.! !!Order methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:45'!Order_id: id	order_id := id.! !!Order methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/25/2022 17:27'!toString	| string |	string := #('Delivery Address:'), address, #('Order placed at:'), dateTime, #('Customer ID:'), cust_id, #('Product ID:'), product_id, #('Retailer ID:'), retailer_id, #('Order ID:'), order_id.	^ string.! !!Order methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/22/2022 16:04'!Cust_id	^ cust_id.! !!Order methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:46'!Product_id	^ product_id.! !TestCase subclass: #OrderTest	instanceVariableNames: ''	classVariableNames: ''	package: 'CustomerOrderingSystem'!!OrderTest methodsFor: 'tests' stamp: 'ThomasWilkinson 10/14/2022 19:45'!testDateTime	| order |	order := Order new.	self assert: (order DateTime) equals: order DateTime.! !Object subclass: #OrderingSystem	instanceVariableNames: 'orderList productList retailerList customerList'	classVariableNames: ''	package: 'CustomerOrderingSystem'!!OrderingSystem commentStamp: 'ThomasWilkinson 10/22/2022 20:10' prior: 0!Class:  Allows the creation and setting up of Customer, Retailer, Order and Product objects.Responsibility: Adds and removes Customer, Retailer, Order and Product objects. Passes respective ids to other classes. Creates arrays of objects allowing them to be referenced. Collaborators: Customer, Order, Retailer and Product classes as creates instances and calls their methods. Gets respective ids to store.Public API and Key MessagesReturns products, customers, retailers and orders arraysReturns products, customers, retailers and orders arrays as raw dataCreates and adds customer, order, product and retailer objects to arraysRemoves customer, order, product and retailer objectsReturns products sold by retailer Internal Representation and Key Implementation PointsInitilises products, orders, retailers and customers OrderedSelections to store and call these objectsAutomatically assigns ids to each object which are the size of the OrderedSelection before the object is appendedAutomatically adds product_id to corresponding retailer's products arrayAutomatically adds order_id to corresponding customer's orders array!!OrderingSystem methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:45'!Products	| prod_list |	prod_list := #('').	productList do: [ :product | prod_list := prod_list, product toString ].	^ prod_list.! !!OrderingSystem methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/22/2022 20:22'!retailerProducts: retail_id	| item |	retailerList do: [ :retailer | retailer Retailer_id = retail_id ifTrue: [ item := retailer ] ]. 	item ifNotNil: [ ^ item productstoString ] ifNil: [ Transcript show: 'Retailer not found'; cr ]. "Checks if retailer exists and returns products sold by it"! !!OrderingSystem methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/25/2022 17:18'!ProductList	^ productList.! !!OrderingSystem methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:45'!OrderList	^ orderList.! !!OrderingSystem methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:45'!Retailers	| retailers |	retailers := #('').	retailerList do: [ :retailer | retailers := retailers, retailer toString ].	^ retailers.! !!OrderingSystem methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:45'!RetailerList	^ retailerList.! !!OrderingSystem methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:45'!Orders	| order_list |	order_list := #('').	orderList do: [ :order | order_list := order_list, order toString ].	^ order_list.! !!OrderingSystem methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:45'!CustomerList	^ customerList.! !!OrderingSystem methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:45'!Customers	| customers |	customers := #('').	customerList do: [ :customer | customers := customers, customer toString ].	^ customers.	! !!OrderingSystem methodsFor: 'removing' stamp: 'ThomasWilkinson 10/25/2022 17:04'!removeOrder: id	| item |	orderList do: [ :order | order Order_id = id ifTrue: [ item := order ] ].	item ifNotNil: [ orderList remove: item ] ifNil: [ Transcript show: 'Order not found'; cr ]. "Checks if order exists and removes it"	item ifNotNil: [ customerList do: [ :customer | customer Orders removeAllSuchThat: [ :order | order Order_id = id ] ] ]. "Removes orders from customer orders"	! !!OrderingSystem methodsFor: 'removing' stamp: 'ThomasWilkinson 10/25/2022 17:15'!removeRetailer: id	| item |	retailerList do: [ :retailer | retailer Retailer_id = id ifTrue: [ item := retailer ] ].	item ifNotNil: [ retailerList remove: item ] ifNil: [ Transcript show: 'Retailer not found'; cr ]. "Checks if retailer exists and removes it"	item ifNotNil: [ productList do: [ :product | product Retailers removeAllSuchThat: [ :retailer | retailer Retailer_id = id ] ] ]. "Removes retailer from retailers that stock a product"	item ifNotNil: [ orderList removeAllSuchThat: [ :order | order Retailer_id = id ] ]. "Removes all orders that involve the retailer"! !!OrderingSystem methodsFor: 'removing' stamp: 'ThomasWilkinson 10/25/2022 17:15'!removeProduct: id	| item |	productList do: [ :product | product Product_id = id ifTrue: [item := product] ].	item ifNotNil: [ productList remove: item ] ifNil: [ Transcript show: 'Product not found'; cr ]. "Checks if product exists and removes it"	item ifNotNil: [ retailerList do: [ :retailer | retailer Products removeAllSuchThat: [ :product | product Product_id = id ] ] ]. "Removes product from products sold by retailers"	item ifNotNil: [ orderList removeAllSuchThat: [ :order | order Product_id = id ] ]. "Removes all orders that involve the product"! !!OrderingSystem methodsFor: 'removing' stamp: 'ThomasWilkinson 10/25/2022 16:53'!removeCustomer: id	| item |	customerList do: [ :customer | customer Cust_id = id ifTrue: [ item := customer ] ].	item ifNotNil: [ customerList remove: item ] ifNil: [ Transcript show: 'Customer not found'; cr ]. "Checks if customer exists and removes it"	item ifNotNil: [ orderList removeAllSuchThat: [ :order | order Cust_id = id ] ]. "Removes all orders placed by customer"! !!OrderingSystem methodsFor: 'initialization' stamp: 'ThomasWilkinson 10/21/2022 19:45'!initialize 	customerList := OrderedCollection new. 	retailerList := OrderedCollection new.	productList := OrderedCollection new.	orderList := OrderedCollection new.! !!OrderingSystem methodsFor: 'adding' stamp: 'ThomasWilkinson 10/30/2022 18:34'!addRetailer: name Address: address Phone_num: phone_num Email: email 	| retailer |	retailer := Retailer new Name: name.	retailer Address: address.	retailer Phone_num: phone_num.	retailer Email: email.	retailer Retailer_id: retailerList size printString. "Sets id to size of retailerList"	retailerList add: retailer.	^ retailer.! !!OrderingSystem methodsFor: 'adding' stamp: 'ThomasWilkinson 10/30/2022 18:34'!addProduct: name Retailer_id: id	| product item |	product := Product new Name: name.	product addRetailer: id.	product Product_id: productList size printString. "Sets id to size of productList"	retailerList do: [ :retailer | retailer Retailer_id = id ifTrue: [item := retailer] ]. 	item ifNotNil: [item addProduct: product] ifNil: [Transcript show: 'Retailer not found'; cr]. "Checks if retailer exists and adds product to retailer"	item ifNotNil: [productList add: product].	^ product.	! !!OrderingSystem methodsFor: 'adding' stamp: 'ThomasWilkinson 10/30/2022 18:33'!addCustomer: name Address: address Phone_num: phone_num Email: email	| customer |	customer := Customer new Name: name.	customer Address: address.	customer Phone_num: phone_num.	customer Email: email.	customer Cust_id: customerList size printString. "Sets size of customerList as id"	customerList add: customer.	^ customer.! !!OrderingSystem methodsFor: 'adding' stamp: 'ThomasWilkinson 10/30/2022 18:34'!addOrder: prod_id Cust_id: cust_id Retail_id: retail_id	| order tempCust tempProds |	customerList do: [ :customer | customer Cust_id = cust_id ifTrue: [ tempCust := customer ] ]. "Stores customer object with given cust_id"	retailerList do: [ :retailer | retailer Retailer_id = retail_id ifTrue: [ tempProds := retailer Products ] ]. "Stores products sold by retailer with retail_id"	order := Order new.	tempCust ifNotNil: [ order Address: tempCust Address ] ifNil: [ Transcript show: 'Customer not found'; cr ]. "Checks if customer exists and if it does sets address to address of customer"	tempProds ifNotNil: [ tempProds do: [ :prod | prod Product_id = prod_id ifTrue: [ order Product_id: prod_id ] ] ] ifNil: [ Transcript show: 'Retailer not found'; cr ]. "Checks if retailer exists and if it does sets order product_id"	order Product_id ifNil: [ Transcript show: 'Product not sold by retailer'; cr ]. "Checks if product exists"	order Cust_id: cust_id.	order Retailer_id: retail_id.	order Order_id: orderList size printString. "Sets id to size of orderList"	tempCust ifNotNil: [tempCust addOrder: order].	tempProds ifNotNil: [orderList add: order].	^ order.	! !Object subclass: #Product	instanceVariableNames: 'retailers name product_id'	classVariableNames: ''	package: 'CustomerOrderingSystem'!!Product commentStamp: 'ThomasWilkinson 10/22/2022 20:04' prior: 0!Class: Represents product ordered from retailer by customerResponsibility: Contains Product_id, Name, Retailer_id fields. Collaborators: Gets retailer_id from corresponding object.Public API and Key MessagesGetters and setter for Name and Product_idAdd, remove and return retailers  Internal Representation and Key Implementation Points.Initialises retailers OrderedSelection at instance creation to store retailer that sell the product!!Product methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:46'!Product_id: id	product_id := id.! !!Product methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:46'!Name	^ name.! !!Product methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/25/2022 17:31'!toString 	| string |	string := #('Product Name:'), name, #('Retailer IDs:'), retailers, #('Product ID:'), product_id.	^ string.! !!Product methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:46'!Retailers	^ retailers.! !!Product methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:46'!Product_id	^ product_id.! !!Product methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/22/2022 15:17'!Name: name_val	name := name_val.! !!Product methodsFor: 'initialization' stamp: 'ThomasWilkinson 10/21/2022 20:36'!initialize 	retailers := OrderedCollection new.! !!Product methodsFor: 'removing' stamp: 'ThomasWilkinson 10/21/2022 19:46'!removeRetailer: id	retailers remove: id.! !!Product methodsFor: 'adding' stamp: 'ThomasWilkinson 10/21/2022 19:46'!addRetailer: retailer	retailers add: retailer.				! !TestCase subclass: #ProductTest	instanceVariableNames: ''	classVariableNames: ''	package: 'CustomerOrderingSystem'!!ProductTest methodsFor: 'tests' stamp: 'ThomasWilkinson 10/13/2022 20:48'!testProduct_id	| product |	product := Product new Product_id: #(1).	self assert: (product Product_id) equals: #(1).! !!ProductTest methodsFor: 'tests' stamp: 'ThomasWilkinson 12/8/2022 16:58'!testaddRetailer 	| product |	product := Product new addRetailer: #(1).	self assert: (product Retailers size) equals: 1.! !!ProductTest methodsFor: 'tests' stamp: 'ThomasWilkinson 12/8/2022 16:58'!testremoveRetailer	| product |	product := Product new addRetailer: 2.	product removeRetailer: 2.	self assert: (product Retailers size) equals: 0.! !!ProductTest methodsFor: 'tests' stamp: 'ThomasWilkinson 10/13/2022 20:50'!testName 	| product |	product := Product new Name: #(TShirt).	self assert: (product Name) equals: #(TShirt).! !Entity subclass: #Retailer	instanceVariableNames: 'retailer_id products'	classVariableNames: ''	package: 'CustomerOrderingSystem'!!Retailer commentStamp: 'ThomasWilkinson 10/22/2022 19:56' prior: 0!Class: The Retailer class which represents the retailer the product was ordered from. Subclass of Entity. Responsibility: Contains Retailer_id and Products fields, which hold the unique retailer id and a list of Product_ids they sell.Collaborators: Inherits Name, Address, Email and Phone_num from Entity class. Public API and Key MessagesRetailer_id getter and setterMethods to add and remove products from OrderedSelection productsReturn products arrayReturn products as string Internal Representation and Key Implementation Points.Initialises products OrderedSelection at instance creation!!Retailer methodsFor: 'removing' stamp: 'ThomasWilkinson 10/21/2022 19:45'!removeProduct: id	products remove: id.	! !!Retailer methodsFor: 'adding' stamp: 'ThomasWilkinson 10/21/2022 19:45'!addProduct: id	products add: id.! !!Retailer methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:44'!Retailer_id: id	retailer_id := id.! !!Retailer methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:45'!Products	^ products.! !!Retailer methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/21/2022 19:44'!Retailer_id	^ retailer_id.! !!Retailer methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/25/2022 17:29'!toString 	| string |	string := #('Retailer Name:'), name, #('Address:'), address, #('Phone Number:'), phone_num, #('Email:'), email, #('Retailer ID:'), retailer_id.	^ string.! !!Retailer methodsFor: 'accessing' stamp: 'ThomasWilkinson 10/22/2022 15:50'!productstoString	| prod_list |	prod_list := #('').	products do: [ :product | prod_list := prod_list, product toString ].	^ prod_list.! !!Retailer methodsFor: 'initialization' stamp: 'ThomasWilkinson 10/21/2022 19:45'!initialize 	products := OrderedCollection new.! !TestCase subclass: #RetailerTest	instanceVariableNames: ''	classVariableNames: ''	package: 'CustomerOrderingSystem'!!RetailerTest methodsFor: 'tests' stamp: 'ThomasWilkinson 10/18/2022 17:40'!testtoString	| retailer |	retailer := Retailer new Name: #(Shop).	retailer Address: #(123 High Street).	retailer Email: #(shop@gmail.com).	retailer Phone_num: #(345).	self assert: (retailer toString) equals: retailer Retailer_id, #(Shop 123 High Street 345 shop@gmail.com).! !!RetailerTest methodsFor: 'tests' stamp: 'ThomasWilkinson 12/8/2022 16:58'!testremoveProduct	| retailer |	retailer := Retailer new addProduct: 2.	retailer removeProduct: 2.	self assert: (retailer Products size) equals: 0.! !!RetailerTest methodsFor: 'tests' stamp: 'ThomasWilkinson 10/13/2022 20:47'!testRetailer_id	| retailer |	retailer := Retailer new Retailer_id: #(1).	self assert: (retailer Retailer_id) equals: #(1).! !!RetailerTest methodsFor: 'tests' stamp: 'ThomasWilkinson 12/8/2022 16:58'!testaddProduct	| retailer |	retailer := Retailer new addProduct: 1.	self assert: (retailer Products size) equals: 1.		! !TestCase subclass: #TestOrderingSystem	instanceVariableNames: ''	classVariableNames: ''	package: 'CustomerOrderingSystem'!!TestOrderingSystem methodsFor: 'tests' stamp: 'ThomasWilkinson 12/8/2022 15:10'!testaddRetailer	| os |	os := OrderingSystem new addRetailer: #(Shop) Address: #(1 High Street)  Phone_num: #(123)  Email: #(shop@gmail.com).	self assert: os Retailers size equals: 1.! !!TestOrderingSystem methodsFor: 'tests' stamp: 'ThomasWilkinson 12/8/2022 15:10'!testremoveCustomer	| os |	os := OrderingSystem new addCustomer: #(a) Address: #(b)  Phone_num: #(c) Email: #(d).		os removeCustomer: #(35).	self assert: (os Customers size) equals: 0.  ! !!TestOrderingSystem methodsFor: 'tests' stamp: 'ThomasWilkinson 12/8/2022 15:06'!testremoveRetailer 	| os |	os := OrderingSystem new.	os addRetailer: #(a) Address: #(b)  Phone_num: #(c) Email: #(d).	os removeRetailer: $0.	self assert: (os Retailers size) equals: 0. ! !!TestOrderingSystem methodsFor: 'tests' stamp: 'ThomasWilkinson 12/8/2022 15:09'!testremoveProduct 		| os |	os := OrderingSystem new.	os addRetailer: #(a) Address: #(b)  Phone_num: #(c) Email: #(d).	os addProduct: #(Product) Retailer_id: '0'.	os removeProduct: '0'.	self assert: (os Products size) equals: 0. ! !!TestOrderingSystem methodsFor: 'tests' stamp: 'ThomasWilkinson 12/8/2022 15:09'!testremoveOrder 	| os |	os := OrderingSystem new addRetailer: #(a) Address: #(b)  Phone_num: #(c) Email: #(d).	os addOrder: #(0) Cust_id: #(1) Retail_id: #(2).	os removeOrder: #(0).	self assert: (os Products size) equals: 0. ! !!TestOrderingSystem methodsFor: 'tests' stamp: 'ThomasWilkinson 12/8/2022 15:10'!testaddProduct 	| os |	os := OrderingSystem new addRetailer: #(Retailer) Address: #(123 High Street) Phone_num: #(345) Email: #(retailer@gmail.com).	os addProduct: #(Product) Retailer_id: '0'.	self assert: os Products size equals: 1.! !!TestOrderingSystem methodsFor: 'tests' stamp: 'ThomasWilkinson 12/8/2022 15:10'!testaddCustomer	| os |	os := OrderingSystem new addCustomer: #(John Smith) Address: #(1 Park Lane)  Phone_num: #(123)  Email: #(johnsmith@gmail.com).	self assert: os Customers size equals: 1.	 ! !